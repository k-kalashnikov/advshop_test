@page "/messenger"
@using AdvantShop.Blazor.Models;
@using AdvantShop.Blazor.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Linq;

@inject IMessengerService Messager
@inject NavigationManager NavigationManager

@if (!IsLogin && !IsRoomReady)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@Username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Login</button>

    // Error messages
    @if (string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="invalid-feedback">@ErrorMessage</div>
        <small id="emailHelp" class="form-text text-muted">@ErrorMessage</small>
    }
}
else if (!IsRoomReady)
{
    <div>

        <p> Create new chat room:</p>

        <input type="text" maxlength="32" @bind="@NewRoom" />
        <button type="button" @onclick="@(() => CreateRoom(NewRoom))"><span class="oi oi-chat" aria-hidden="true"></span> Create room</button>

        @if(ChatRooms.Any())
        {
            <p> or choose from list:</p>

            <select @bind="@RoomId">
                @foreach (var item in ChatRooms)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
            <button type="button" @onclick="(() => EnterToRoom(RoomId))"><span class="oi oi-chat" aria-hidden="true"></span>Enter</button>
        }

    </div>
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@Username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox" class="scrollbox">
        @foreach (var item in ChatMessages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@NewMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(NewMessage))">Send</button>
    </div>
}

@code{
    private bool IsLogin = false;
    private bool IsRoomReady = false;
    private long RoomId = -1;
    private string Username;
    private string ErrorMessage;
    private string NewMessage;
    private string NewRoom;
    private ICollection<MessageViewModel> ChatMessages = new List<MessageViewModel>();
    private IEnumerable<ChatRoom> ChatRooms = new List<ChatRoom>();
    private HubConnection HubConnection;

    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(Username))
        {
            ErrorMessage = "Please enter a name";
            return;
        };

        try
        {
            await Task.Delay(1);

            // remove old messages if any
            ChatMessages = new List<MessageViewModel>();

            // Create the chat client
            string baseUrl = NavigationManager.BaseUri;

            var hubUrl = $"{baseUrl.TrimEnd('/')}/messagerHub";

            HubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .Build();

            HubConnection.On<ChatMessage>("Broadcast", BroadcastMessage);
            await HubConnection.StartAsync();

            ChatRooms = await HubConnection.InvokeAsync<IEnumerable<ChatRoom>>("GetRooms");
            await HubConnection.InvokeAsync<IEnumerable<ChatRoom>>("AddUser", Username);
        }
        catch (Exception e)
        {
            ErrorMessage = $"ERROR: Failed to start chat client: {e.Message}";
        }

        IsLogin = true;
    }

    private void BroadcastMessage(ChatMessage chatMessage)
    {
        bool isMine = chatMessage.SendBy.Equals(Username);

        ChatMessages.Add(new MessageViewModel(chatMessage.SendBy, chatMessage.Message, isMine));

        // Inform blazor the UI needs updating
        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (string.IsNullOrEmpty(Username))
        {
            await SendAsync($"[Notice] {Username} left chat room.");

            await HubConnection.StopAsync();
            await HubConnection.DisposeAsync();

            HubConnection = null;
        }
    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrEmpty(Username) && !string.IsNullOrWhiteSpace(message))
        {
            await HubConnection.SendAsync("SendMessage", message, RoomId);

            NewMessage = string.Empty;
        }
    }

    private async Task EnterToRoom(long roomId)
    {
        RoomId = roomId;

        ChatMessages = (await HubConnection.InvokeAsync<IEnumerable<ChatMessage>>("GetRoomMessages", roomId))
            .Select(m => new MessageViewModel(m.SendBy, m.Message, m.SendBy.Equals(Username)))
            .ToList();

        IsRoomReady = true;

        await SendAsync($"[Notice] {Username} joined chat room.");
    }

    private async Task CreateRoom(string roomName)
    {
        RoomId = (await HubConnection.InvokeAsync<long>("AddRoom", roomName));
        await EnterToRoom(RoomId);
    }

    private class MessageViewModel
    {
        public MessageViewModel(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
